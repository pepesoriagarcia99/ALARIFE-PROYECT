"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.App = void 0;var _Configuration = _interopRequireDefault(require("../modules/Configuration.js"));
var _DeveloperError = _interopRequireDefault(require("../modules/DeveloperError.js"));
var _Logger = _interopRequireDefault(require("../modules/Logger.js"));

var _ValueStore = _interopRequireDefault(require("../modules/ValueStore.js"));
var _Launcher = _interopRequireDefault(require("../modules/Launcher.js"));

var _utils = require("../utils.js");

/**
 * TODO: Analizar
 * TODO: Crear un decorador para SecureClientBuilder
 * TODO: Comunicacion directa entre microservicios (p2p) -- wrtc y socket.io
 */

/**
 * TODO: Analizar
 * TODO: Crear un Modulo QueueService
 */

/**
  ** App decorator
  * @returns {function} The decorator function
*/
const App = () =>
(Target, { kind, metadata }) => {
  if (kind !== 'class') {
    throw new _DeveloperError.default('The App decorator can only be applied to classes.');
  }

  /** Target Metadata */
  if ((0, _utils.isDefined)(metadata.decorated)) {
    metadata.decorated.push('App');
  } else
  {
    metadata.decorated = ['App'];
  }

  /** Modules used in the instance */
  const logService = new _Logger.default(Target.name);
  (0, _utils.defineProperty)(Target.prototype, 'log', logService.methods);

  /**
   * TODO: posible migracion al constructor del ValueStore
   */
  /** Defines injectable values */
  _ValueStore.default.set('Core.environment', _Configuration.default.environment);
  _ValueStore.default.set('Core.version', _Configuration.default.version);
  _ValueStore.default.set('Core.rootPath', _Configuration.default.rootPath);
  _ValueStore.default.set('Core.traceLog', _Configuration.default.traceLog);

  _ValueStore.default.merge('configuration', _Configuration.default.publicConfiguration());

  /** App launcher */
  (0, _Launcher.default)(Target);
};exports.App = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfQ29uZmlndXJhdGlvbiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX0RldmVsb3BlckVycm9yIiwiX0xvZ2dlciIsIl9WYWx1ZVN0b3JlIiwiX0xhdW5jaGVyIiwiX3V0aWxzIiwiQXBwIiwiVGFyZ2V0Iiwia2luZCIsIm1ldGFkYXRhIiwiRGV2ZWxvcGVyRXJyb3IiLCJpc0RlZmluZWQiLCJkZWNvcmF0ZWQiLCJwdXNoIiwibG9nU2VydmljZSIsIkxvZ2dlciIsIm5hbWUiLCJkZWZpbmVQcm9wZXJ0eSIsInByb3RvdHlwZSIsIm1ldGhvZHMiLCJ2YWx1ZVN0b3JlIiwic2V0IiwiY29uZmlndXJhdGlvbiIsImVudmlyb25tZW50IiwidmVyc2lvbiIsInJvb3RQYXRoIiwidHJhY2VMb2ciLCJtZXJnZSIsInB1YmxpY0NvbmZpZ3VyYXRpb24iLCJsYXVuY2hlciIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi9zb3VyY2UvZGVjb3JhdG9ycy9BcHAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvbmZpZ3VyYXRpb24gZnJvbSAnLi4vbW9kdWxlcy9Db25maWd1cmF0aW9uLmpzJztcclxuaW1wb3J0IERldmVsb3BlckVycm9yIGZyb20gJy4uL21vZHVsZXMvRGV2ZWxvcGVyRXJyb3IuanMnO1xyXG5pbXBvcnQgTG9nZ2VyIGZyb20gJy4uL21vZHVsZXMvTG9nZ2VyLmpzJztcclxuXHJcbmltcG9ydCB2YWx1ZVN0b3JlIGZyb20gJy4uL21vZHVsZXMvVmFsdWVTdG9yZS5qcyc7XHJcbmltcG9ydCBsYXVuY2hlciBmcm9tICcuLi9tb2R1bGVzL0xhdW5jaGVyLmpzJztcclxuXHJcbmltcG9ydCB7IGRlZmluZVByb3BlcnR5LCBpc0RlZmluZWQgfSBmcm9tICcuLi91dGlscy5qcyc7XHJcblxyXG4vKipcclxuICogVE9ETzogQW5hbGl6YXJcclxuICogVE9ETzogQ3JlYXIgdW4gZGVjb3JhZG9yIHBhcmEgU2VjdXJlQ2xpZW50QnVpbGRlclxyXG4gKiBUT0RPOiBDb211bmljYWNpb24gZGlyZWN0YSBlbnRyZSBtaWNyb3NlcnZpY2lvcyAocDJwKSAtLSB3cnRjIHkgc29ja2V0LmlvXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIFRPRE86IEFuYWxpemFyXHJcbiAqIFRPRE86IENyZWFyIHVuIE1vZHVsbyBRdWV1ZVNlcnZpY2VcclxuICovXHJcblxyXG4vKipcclxuICAqKiBBcHAgZGVjb3JhdG9yXHJcbiAgKiBAcmV0dXJucyB7ZnVuY3Rpb259IFRoZSBkZWNvcmF0b3IgZnVuY3Rpb25cclxuKi9cclxuZXhwb3J0IGNvbnN0IEFwcCA9ICgpID0+XHJcbiAgKFRhcmdldCwgeyBraW5kLCBtZXRhZGF0YSB9KSA9PiB7XHJcbiAgICBpZiAoa2luZCAhPT0gJ2NsYXNzJykge1xyXG4gICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3IoJ1RoZSBBcHAgZGVjb3JhdG9yIGNhbiBvbmx5IGJlIGFwcGxpZWQgdG8gY2xhc3Nlcy4nKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogVGFyZ2V0IE1ldGFkYXRhICovXHJcbiAgICBpZiAoaXNEZWZpbmVkKG1ldGFkYXRhLmRlY29yYXRlZCkpIHtcclxuICAgICAgbWV0YWRhdGEuZGVjb3JhdGVkLnB1c2goJ0FwcCcpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIG1ldGFkYXRhLmRlY29yYXRlZCA9IFsnQXBwJ107XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIE1vZHVsZXMgdXNlZCBpbiB0aGUgaW5zdGFuY2UgKi9cclxuICAgIGNvbnN0IGxvZ1NlcnZpY2UgPSBuZXcgTG9nZ2VyKFRhcmdldC5uYW1lKTtcclxuICAgIGRlZmluZVByb3BlcnR5KFRhcmdldC5wcm90b3R5cGUsICdsb2cnLCBsb2dTZXJ2aWNlLm1ldGhvZHMpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVE9ETzogcG9zaWJsZSBtaWdyYWNpb24gYWwgY29uc3RydWN0b3IgZGVsIFZhbHVlU3RvcmVcclxuICAgICAqL1xyXG4gICAgLyoqIERlZmluZXMgaW5qZWN0YWJsZSB2YWx1ZXMgKi9cclxuICAgIHZhbHVlU3RvcmUuc2V0KCdDb3JlLmVudmlyb25tZW50JywgY29uZmlndXJhdGlvbi5lbnZpcm9ubWVudCk7XHJcbiAgICB2YWx1ZVN0b3JlLnNldCgnQ29yZS52ZXJzaW9uJywgY29uZmlndXJhdGlvbi52ZXJzaW9uKTtcclxuICAgIHZhbHVlU3RvcmUuc2V0KCdDb3JlLnJvb3RQYXRoJywgY29uZmlndXJhdGlvbi5yb290UGF0aCk7XHJcbiAgICB2YWx1ZVN0b3JlLnNldCgnQ29yZS50cmFjZUxvZycsIGNvbmZpZ3VyYXRpb24udHJhY2VMb2cpO1xyXG5cclxuICAgIHZhbHVlU3RvcmUubWVyZ2UoJ2NvbmZpZ3VyYXRpb24nLCBjb25maWd1cmF0aW9uLnB1YmxpY0NvbmZpZ3VyYXRpb24oKSk7XHJcblxyXG4gICAgLyoqIEFwcCBsYXVuY2hlciAqL1xyXG4gICAgbGF1bmNoZXIoVGFyZ2V0KTtcclxuICB9O1xyXG4iXSwibWFwcGluZ3MiOiJxTEFBQSxJQUFBQSxjQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxlQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxPQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7O0FBRUEsSUFBQUcsV0FBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUksU0FBQSxHQUFBTCxzQkFBQSxDQUFBQyxPQUFBOztBQUVBLElBQUFLLE1BQUEsR0FBQUwsT0FBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sTUFBTU0sR0FBRyxHQUFHQSxDQUFBO0FBQ2pCLENBQUNDLE1BQU0sRUFBRSxFQUFFQyxJQUFJLEVBQUVDLFFBQVEsQ0FBQyxDQUFDLEtBQUs7RUFDOUIsSUFBSUQsSUFBSSxLQUFLLE9BQU8sRUFBRTtJQUNwQixNQUFNLElBQUlFLHVCQUFjLENBQUMsbURBQW1ELENBQUM7RUFDL0U7O0VBRUE7RUFDQSxJQUFJLElBQUFDLGdCQUFTLEVBQUNGLFFBQVEsQ0FBQ0csU0FBUyxDQUFDLEVBQUU7SUFDakNILFFBQVEsQ0FBQ0csU0FBUyxDQUFDQyxJQUFJLENBQUMsS0FBSyxDQUFDO0VBQ2hDLENBQUM7RUFDSTtJQUNISixRQUFRLENBQUNHLFNBQVMsR0FBRyxDQUFDLEtBQUssQ0FBQztFQUM5Qjs7RUFFQTtFQUNBLE1BQU1FLFVBQVUsR0FBRyxJQUFJQyxlQUFNLENBQUNSLE1BQU0sQ0FBQ1MsSUFBSSxDQUFDO0VBQzFDLElBQUFDLHFCQUFjLEVBQUNWLE1BQU0sQ0FBQ1csU0FBUyxFQUFFLEtBQUssRUFBRUosVUFBVSxDQUFDSyxPQUFPLENBQUM7O0VBRTNEO0FBQ0o7QUFDQTtFQUNJO0VBQ0FDLG1CQUFVLENBQUNDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRUMsc0JBQWEsQ0FBQ0MsV0FBVyxDQUFDO0VBQzdESCxtQkFBVSxDQUFDQyxHQUFHLENBQUMsY0FBYyxFQUFFQyxzQkFBYSxDQUFDRSxPQUFPLENBQUM7RUFDckRKLG1CQUFVLENBQUNDLEdBQUcsQ0FBQyxlQUFlLEVBQUVDLHNCQUFhLENBQUNHLFFBQVEsQ0FBQztFQUN2REwsbUJBQVUsQ0FBQ0MsR0FBRyxDQUFDLGVBQWUsRUFBRUMsc0JBQWEsQ0FBQ0ksUUFBUSxDQUFDOztFQUV2RE4sbUJBQVUsQ0FBQ08sS0FBSyxDQUFDLGVBQWUsRUFBRUwsc0JBQWEsQ0FBQ00sbUJBQW1CLENBQUMsQ0FBQyxDQUFDOztFQUV0RTtFQUNBLElBQUFDLGlCQUFRLEVBQUN0QixNQUFNLENBQUM7QUFDbEIsQ0FBQyxDQUFDdUIsT0FBQSxDQUFBeEIsR0FBQSxHQUFBQSxHQUFBIn0=
"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.launcher = exports.default = void 0;var _InstanceStore = _interopRequireDefault(require("../modules/InstanceStore.js"));
var _Banner = _interopRequireDefault(require("../modules/Banner.js"));

var _Configuration = _interopRequireDefault(require("./Configuration.js"));

/**
  * TODO: Usar pm2
  * Libreria para monitorizacion de apis
  ** https://www.npmjs.com/package/pm2?activeTab=dependencies
*/

const launcher = exports.launcher = {
  /**
   * The banner data to print
   * @type {Object}
   */
  bannerData: {
    coreVersion: `${_Configuration.default.version}\n`,
    environment: _Configuration.default.environment,
    version: process.env.npm_package_version
  },
  /**
   * Callback to execute before launching
   * @type {Array<Function>}
   */
  beforeLaunching: [],
  /**
   * Callback to execute after launching
   * @type {Array<Function>}
   */
  afterLaunching: [],
  /**
   * Add banner data
   * @param {String} key The key to print
   * @param {String} value The value to print
   */
  addBannerData(key, value) {
    this.bannerData[key] = value;
  },
  /**
   * Add callback before launching
   * @param {Function} callback The callback to add
   */
  addCallbackBeforeLaunching(callback) {
    this.beforeLaunching.push(callback);
  },
  /**
   * Add callback after launching
   * @param {Function} callback The callback to add
   */
  addCallbackAfterLaunching(callback) {
    this.afterLaunching.push(callback);
  }
};var _default =

(Target) => {
  const banner = new _Banner.default();
  banner.print(launcher.bannerData);

  launcher.beforeLaunching.forEach((callback) => callback(Target));

  const instance = new Target();
  _InstanceStore.default.set(Target.name, instance);

  launcher.afterLaunching.forEach((callback) => callback(Target, instance));
};exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfSW5zdGFuY2VTdG9yZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX0Jhbm5lciIsIl9Db25maWd1cmF0aW9uIiwibGF1bmNoZXIiLCJleHBvcnRzIiwiYmFubmVyRGF0YSIsImNvcmVWZXJzaW9uIiwiY29uZmlndXJhdGlvbiIsInZlcnNpb24iLCJlbnZpcm9ubWVudCIsInByb2Nlc3MiLCJlbnYiLCJucG1fcGFja2FnZV92ZXJzaW9uIiwiYmVmb3JlTGF1bmNoaW5nIiwiYWZ0ZXJMYXVuY2hpbmciLCJhZGRCYW5uZXJEYXRhIiwia2V5IiwidmFsdWUiLCJhZGRDYWxsYmFja0JlZm9yZUxhdW5jaGluZyIsImNhbGxiYWNrIiwicHVzaCIsImFkZENhbGxiYWNrQWZ0ZXJMYXVuY2hpbmciLCJfZGVmYXVsdCIsIlRhcmdldCIsImJhbm5lciIsIkJhbm5lciIsInByaW50IiwiZm9yRWFjaCIsImluc3RhbmNlIiwiaW5zdGFuY2VTdG9yZSIsInNldCIsIm5hbWUiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vc291cmNlL21vZHVsZXMvTGF1bmNoZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGluc3RhbmNlU3RvcmUgZnJvbSAnLi4vbW9kdWxlcy9JbnN0YW5jZVN0b3JlLmpzJztcclxuaW1wb3J0IEJhbm5lciBmcm9tICcuLi9tb2R1bGVzL0Jhbm5lci5qcyc7XHJcblxyXG5pbXBvcnQgY29uZmlndXJhdGlvbiBmcm9tICcuL0NvbmZpZ3VyYXRpb24uanMnO1xyXG5cclxuLyoqXHJcbiAgKiBUT0RPOiBVc2FyIHBtMlxyXG4gICogTGlicmVyaWEgcGFyYSBtb25pdG9yaXphY2lvbiBkZSBhcGlzXHJcbiAgKiogaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcG0yP2FjdGl2ZVRhYj1kZXBlbmRlbmNpZXNcclxuKi9cclxuXHJcbmV4cG9ydCBjb25zdCBsYXVuY2hlciA9IHtcclxuICAvKipcclxuICAgKiBUaGUgYmFubmVyIGRhdGEgdG8gcHJpbnRcclxuICAgKiBAdHlwZSB7T2JqZWN0fVxyXG4gICAqL1xyXG4gIGJhbm5lckRhdGEgOiB7XHJcbiAgICBjb3JlVmVyc2lvbiA6IGAke2NvbmZpZ3VyYXRpb24udmVyc2lvbn1cXG5gLFxyXG4gICAgZW52aXJvbm1lbnQgOiBjb25maWd1cmF0aW9uLmVudmlyb25tZW50LFxyXG4gICAgdmVyc2lvbiAgICAgOiBwcm9jZXNzLmVudi5ucG1fcGFja2FnZV92ZXJzaW9uXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDYWxsYmFjayB0byBleGVjdXRlIGJlZm9yZSBsYXVuY2hpbmdcclxuICAgKiBAdHlwZSB7QXJyYXk8RnVuY3Rpb24+fVxyXG4gICAqL1xyXG4gIGJlZm9yZUxhdW5jaGluZyA6IFtdLFxyXG4gIC8qKlxyXG4gICAqIENhbGxiYWNrIHRvIGV4ZWN1dGUgYWZ0ZXIgbGF1bmNoaW5nXHJcbiAgICogQHR5cGUge0FycmF5PEZ1bmN0aW9uPn1cclxuICAgKi9cclxuICBhZnRlckxhdW5jaGluZyAgOiBbXSxcclxuICAvKipcclxuICAgKiBBZGQgYmFubmVyIGRhdGFcclxuICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5IFRoZSBrZXkgdG8gcHJpbnRcclxuICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsdWUgVGhlIHZhbHVlIHRvIHByaW50XHJcbiAgICovXHJcbiAgYWRkQmFubmVyRGF0YShrZXksIHZhbHVlKSB7XHJcbiAgICB0aGlzLmJhbm5lckRhdGFba2V5XSA9IHZhbHVlO1xyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQWRkIGNhbGxiYWNrIGJlZm9yZSBsYXVuY2hpbmdcclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgdG8gYWRkXHJcbiAgICovXHJcbiAgYWRkQ2FsbGJhY2tCZWZvcmVMYXVuY2hpbmcoY2FsbGJhY2spIHtcclxuICAgIHRoaXMuYmVmb3JlTGF1bmNoaW5nLnB1c2goY2FsbGJhY2spO1xyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQWRkIGNhbGxiYWNrIGFmdGVyIGxhdW5jaGluZ1xyXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBjYWxsYmFjayB0byBhZGRcclxuICAgKi9cclxuICBhZGRDYWxsYmFja0FmdGVyTGF1bmNoaW5nKGNhbGxiYWNrKSB7XHJcbiAgICB0aGlzLmFmdGVyTGF1bmNoaW5nLnB1c2goY2FsbGJhY2spO1xyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRhcmdldCA9PiB7XHJcbiAgY29uc3QgYmFubmVyID0gbmV3IEJhbm5lcigpO1xyXG4gIGJhbm5lci5wcmludChsYXVuY2hlci5iYW5uZXJEYXRhKTtcclxuXHJcbiAgbGF1bmNoZXIuYmVmb3JlTGF1bmNoaW5nLmZvckVhY2goY2FsbGJhY2sgPT4gY2FsbGJhY2soVGFyZ2V0KSk7XHJcblxyXG4gIGNvbnN0IGluc3RhbmNlID0gbmV3IFRhcmdldCgpO1xyXG4gIGluc3RhbmNlU3RvcmUuc2V0KFRhcmdldC5uYW1lLCBpbnN0YW5jZSk7XHJcblxyXG4gIGxhdW5jaGVyLmFmdGVyTGF1bmNoaW5nLmZvckVhY2goY2FsbGJhY2sgPT4gY2FsbGJhY2soVGFyZ2V0LCBpbnN0YW5jZSkpO1xyXG59O1xyXG4iXSwibWFwcGluZ3MiOiI0TUFBQSxJQUFBQSxjQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxPQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7O0FBRUEsSUFBQUUsY0FBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRU8sTUFBTUcsUUFBUSxHQUFBQyxPQUFBLENBQUFELFFBQUEsR0FBRztFQUN0QjtBQUNGO0FBQ0E7QUFDQTtFQUNFRSxVQUFVLEVBQUc7SUFDWEMsV0FBVyxFQUFJLEdBQUVDLHNCQUFhLENBQUNDLE9BQVEsSUFBRztJQUMxQ0MsV0FBVyxFQUFHRixzQkFBYSxDQUFDRSxXQUFXO0lBQ3ZDRCxPQUFPLEVBQU9FLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDQztFQUM1QixDQUFDO0VBQ0Q7QUFDRjtBQUNBO0FBQ0E7RUFDRUMsZUFBZSxFQUFHLEVBQUU7RUFDcEI7QUFDRjtBQUNBO0FBQ0E7RUFDRUMsY0FBYyxFQUFJLEVBQUU7RUFDcEI7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFQyxhQUFhQSxDQUFDQyxHQUFHLEVBQUVDLEtBQUssRUFBRTtJQUN4QixJQUFJLENBQUNaLFVBQVUsQ0FBQ1csR0FBRyxDQUFDLEdBQUdDLEtBQUs7RUFDOUIsQ0FBQztFQUNEO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VDLDBCQUEwQkEsQ0FBQ0MsUUFBUSxFQUFFO0lBQ25DLElBQUksQ0FBQ04sZUFBZSxDQUFDTyxJQUFJLENBQUNELFFBQVEsQ0FBQztFQUNyQyxDQUFDO0VBQ0Q7QUFDRjtBQUNBO0FBQ0E7RUFDRUUseUJBQXlCQSxDQUFDRixRQUFRLEVBQUU7SUFDbEMsSUFBSSxDQUFDTCxjQUFjLENBQUNNLElBQUksQ0FBQ0QsUUFBUSxDQUFDO0VBQ3BDO0FBQ0YsQ0FBQyxDQUFDLElBQUFHLFFBQUE7O0FBRWFBLENBQUFDLE1BQU0sS0FBSTtFQUN2QixNQUFNQyxNQUFNLEdBQUcsSUFBSUMsZUFBTSxDQUFDLENBQUM7RUFDM0JELE1BQU0sQ0FBQ0UsS0FBSyxDQUFDdkIsUUFBUSxDQUFDRSxVQUFVLENBQUM7O0VBRWpDRixRQUFRLENBQUNVLGVBQWUsQ0FBQ2MsT0FBTyxDQUFDLENBQUFSLFFBQVEsS0FBSUEsUUFBUSxDQUFDSSxNQUFNLENBQUMsQ0FBQzs7RUFFOUQsTUFBTUssUUFBUSxHQUFHLElBQUlMLE1BQU0sQ0FBQyxDQUFDO0VBQzdCTSxzQkFBYSxDQUFDQyxHQUFHLENBQUNQLE1BQU0sQ0FBQ1EsSUFBSSxFQUFFSCxRQUFRLENBQUM7O0VBRXhDekIsUUFBUSxDQUFDVyxjQUFjLENBQUNhLE9BQU8sQ0FBQyxDQUFBUixRQUFRLEtBQUlBLFFBQVEsQ0FBQ0ksTUFBTSxFQUFFSyxRQUFRLENBQUMsQ0FBQztBQUN6RSxDQUFDLENBQUF4QixPQUFBLENBQUE0QixPQUFBLEdBQUFWLFFBQUEifQ==
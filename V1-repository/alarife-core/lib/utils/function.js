"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.isFunction = exports.decodeArgs = void 0;var _object = require("./object");

const isFunction = (value) => typeof value === 'function';

/**
 * Decode arguments
 *
 * @param {Array} args Decorator arguments
 * @param {Function} processOptions Processes the options to validate them
 * @returns {Object} Returns an object containing the decoded arguments
 */exports.isFunction = isFunction;
const decodeArgs = (args = [], processOptions = (opt) => opt) => {
  const data = {};

  if (args.length === 1) {
    const [ps1] = args;

    if (Array.isArray(ps1)) {
      data.values = ps1;
    } else
    if ((0, _object.isString)(ps1)) {
      data.name = ps1;
    } else
    if ((0, _object.isObject)(ps1)) {
      data.options = processOptions(ps1);
    } else
    if ((0, _object.isClass)(ps1)) {
      data.target = ps1;
    }
  } else
  if (args.length === 2) {
    const [ps1, ps2] = args;

    if ((0, _object.isString)(ps1)) {
      data.name = ps1;

      if ((0, _object.isObject)(ps2)) {
        data.options = processOptions(ps2);
      }
    } else
    if (Array.isArray(ps1)) {
      data.values = ps1;

      if ((0, _object.isObject)(ps2)) {
        data.options = processOptions(ps2);
      }
    } else
    if ((0, _object.isClass)(ps1)) {
      data.target = ps1;

      if ((0, _object.isObject)(ps2)) {
        data.options = processOptions(ps2);
      }
    }
  } else
  if (args.length === 3) {
    const [ps1, ps2, ps3] = args;

    if ((0, _object.isString)(ps1)) {
      data.name = ps1;

      if (Array.isArray(ps2)) {
        data.values = ps2;
      } else
      if ((0, _object.isClass)(ps2) || (0, _object.isObject)(ps2)) {
        data.target = ps2;
      }

      if ((0, _object.isObject)(ps3)) {
        data.options = processOptions(ps3);
      }
    }
  }

  return data;
};exports.decodeArgs = decodeArgs;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfb2JqZWN0IiwicmVxdWlyZSIsImlzRnVuY3Rpb24iLCJ2YWx1ZSIsImV4cG9ydHMiLCJkZWNvZGVBcmdzIiwiYXJncyIsInByb2Nlc3NPcHRpb25zIiwib3B0IiwiZGF0YSIsImxlbmd0aCIsInBzMSIsIkFycmF5IiwiaXNBcnJheSIsInZhbHVlcyIsImlzU3RyaW5nIiwibmFtZSIsImlzT2JqZWN0Iiwib3B0aW9ucyIsImlzQ2xhc3MiLCJ0YXJnZXQiLCJwczIiLCJwczMiXSwic291cmNlcyI6WyIuLi8uLi9zb3VyY2UvdXRpbHMvZnVuY3Rpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNDbGFzcywgaXNPYmplY3QsIGlzU3RyaW5nIH0gZnJvbSAnLi9vYmplY3QnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGlzRnVuY3Rpb24gPSB2YWx1ZSA9PiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XHJcblxyXG4vKipcclxuICogRGVjb2RlIGFyZ3VtZW50c1xyXG4gKlxyXG4gKiBAcGFyYW0ge0FycmF5fSBhcmdzIERlY29yYXRvciBhcmd1bWVudHNcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJvY2Vzc09wdGlvbnMgUHJvY2Vzc2VzIHRoZSBvcHRpb25zIHRvIHZhbGlkYXRlIHRoZW1cclxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgZGVjb2RlZCBhcmd1bWVudHNcclxuICovXHJcbmV4cG9ydCBjb25zdCBkZWNvZGVBcmdzID0gKGFyZ3MgPSBbXSwgcHJvY2Vzc09wdGlvbnMgPSBvcHQgPT4gb3B0KSA9PiB7XHJcbiAgY29uc3QgZGF0YSA9IHt9O1xyXG5cclxuICBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcclxuICAgIGNvbnN0IFtwczFdID0gYXJncztcclxuXHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheShwczEpKSB7XHJcbiAgICAgIGRhdGEudmFsdWVzID0gcHMxO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNTdHJpbmcocHMxKSkge1xyXG4gICAgICBkYXRhLm5hbWUgPSBwczE7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc09iamVjdChwczEpKSB7XHJcbiAgICAgIGRhdGEub3B0aW9ucyA9IHByb2Nlc3NPcHRpb25zKHBzMSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc0NsYXNzKHBzMSkpIHtcclxuICAgICAgZGF0YS50YXJnZXQgPSBwczE7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGVsc2UgaWYgKGFyZ3MubGVuZ3RoID09PSAyKSB7XHJcbiAgICBjb25zdCBbcHMxLCBwczJdID0gYXJncztcclxuXHJcbiAgICBpZiAoaXNTdHJpbmcocHMxKSkge1xyXG4gICAgICBkYXRhLm5hbWUgPSBwczE7XHJcblxyXG4gICAgICBpZiAoaXNPYmplY3QocHMyKSkge1xyXG4gICAgICAgIGRhdGEub3B0aW9ucyA9IHByb2Nlc3NPcHRpb25zKHBzMik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocHMxKSkge1xyXG4gICAgICBkYXRhLnZhbHVlcyA9IHBzMTtcclxuXHJcbiAgICAgIGlmIChpc09iamVjdChwczIpKSB7XHJcbiAgICAgICAgZGF0YS5vcHRpb25zID0gcHJvY2Vzc09wdGlvbnMocHMyKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNDbGFzcyhwczEpKSB7XHJcbiAgICAgIGRhdGEudGFyZ2V0ID0gcHMxO1xyXG5cclxuICAgICAgaWYgKGlzT2JqZWN0KHBzMikpIHtcclxuICAgICAgICBkYXRhLm9wdGlvbnMgPSBwcm9jZXNzT3B0aW9ucyhwczIpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIGVsc2UgaWYgKGFyZ3MubGVuZ3RoID09PSAzKSB7XHJcbiAgICBjb25zdCBbcHMxLCBwczIsIHBzM10gPSBhcmdzO1xyXG5cclxuICAgIGlmIChpc1N0cmluZyhwczEpKSB7XHJcbiAgICAgIGRhdGEubmFtZSA9IHBzMTtcclxuXHJcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHBzMikpIHtcclxuICAgICAgICBkYXRhLnZhbHVlcyA9IHBzMjtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmIChpc0NsYXNzKHBzMikgfHwgaXNPYmplY3QocHMyKSkge1xyXG4gICAgICAgIGRhdGEudGFyZ2V0ID0gcHMyO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoaXNPYmplY3QocHMzKSkge1xyXG4gICAgICAgIGRhdGEub3B0aW9ucyA9IHByb2Nlc3NPcHRpb25zKHBzMyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiBkYXRhO1xyXG59O1xyXG4iXSwibWFwcGluZ3MiOiI0SEFBQSxJQUFBQSxPQUFBLEdBQUFDLE9BQUE7O0FBRU8sTUFBTUMsVUFBVSxHQUFHQSxDQUFBQyxLQUFLLEtBQUksT0FBT0EsS0FBSyxLQUFLLFVBQVU7O0FBRTlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBTkFDLE9BQUEsQ0FBQUYsVUFBQSxHQUFBQSxVQUFBO0FBT08sTUFBTUcsVUFBVSxHQUFHQSxDQUFDQyxJQUFJLEdBQUcsRUFBRSxFQUFFQyxjQUFjLEdBQUdBLENBQUFDLEdBQUcsS0FBSUEsR0FBRyxLQUFLO0VBQ3BFLE1BQU1DLElBQUksR0FBRyxDQUFDLENBQUM7O0VBRWYsSUFBSUgsSUFBSSxDQUFDSSxNQUFNLEtBQUssQ0FBQyxFQUFFO0lBQ3JCLE1BQU0sQ0FBQ0MsR0FBRyxDQUFDLEdBQUdMLElBQUk7O0lBRWxCLElBQUlNLEtBQUssQ0FBQ0MsT0FBTyxDQUFDRixHQUFHLENBQUMsRUFBRTtNQUN0QkYsSUFBSSxDQUFDSyxNQUFNLEdBQUdILEdBQUc7SUFDbkIsQ0FBQztJQUNJLElBQUksSUFBQUksZ0JBQVEsRUFBQ0osR0FBRyxDQUFDLEVBQUU7TUFDdEJGLElBQUksQ0FBQ08sSUFBSSxHQUFHTCxHQUFHO0lBQ2pCLENBQUM7SUFDSSxJQUFJLElBQUFNLGdCQUFRLEVBQUNOLEdBQUcsQ0FBQyxFQUFFO01BQ3RCRixJQUFJLENBQUNTLE9BQU8sR0FBR1gsY0FBYyxDQUFDSSxHQUFHLENBQUM7SUFDcEMsQ0FBQztJQUNJLElBQUksSUFBQVEsZUFBTyxFQUFDUixHQUFHLENBQUMsRUFBRTtNQUNyQkYsSUFBSSxDQUFDVyxNQUFNLEdBQUdULEdBQUc7SUFDbkI7RUFDRixDQUFDO0VBQ0ksSUFBSUwsSUFBSSxDQUFDSSxNQUFNLEtBQUssQ0FBQyxFQUFFO0lBQzFCLE1BQU0sQ0FBQ0MsR0FBRyxFQUFFVSxHQUFHLENBQUMsR0FBR2YsSUFBSTs7SUFFdkIsSUFBSSxJQUFBUyxnQkFBUSxFQUFDSixHQUFHLENBQUMsRUFBRTtNQUNqQkYsSUFBSSxDQUFDTyxJQUFJLEdBQUdMLEdBQUc7O01BRWYsSUFBSSxJQUFBTSxnQkFBUSxFQUFDSSxHQUFHLENBQUMsRUFBRTtRQUNqQlosSUFBSSxDQUFDUyxPQUFPLEdBQUdYLGNBQWMsQ0FBQ2MsR0FBRyxDQUFDO01BQ3BDO0lBQ0YsQ0FBQztJQUNJLElBQUlULEtBQUssQ0FBQ0MsT0FBTyxDQUFDRixHQUFHLENBQUMsRUFBRTtNQUMzQkYsSUFBSSxDQUFDSyxNQUFNLEdBQUdILEdBQUc7O01BRWpCLElBQUksSUFBQU0sZ0JBQVEsRUFBQ0ksR0FBRyxDQUFDLEVBQUU7UUFDakJaLElBQUksQ0FBQ1MsT0FBTyxHQUFHWCxjQUFjLENBQUNjLEdBQUcsQ0FBQztNQUNwQztJQUNGLENBQUM7SUFDSSxJQUFJLElBQUFGLGVBQU8sRUFBQ1IsR0FBRyxDQUFDLEVBQUU7TUFDckJGLElBQUksQ0FBQ1csTUFBTSxHQUFHVCxHQUFHOztNQUVqQixJQUFJLElBQUFNLGdCQUFRLEVBQUNJLEdBQUcsQ0FBQyxFQUFFO1FBQ2pCWixJQUFJLENBQUNTLE9BQU8sR0FBR1gsY0FBYyxDQUFDYyxHQUFHLENBQUM7TUFDcEM7SUFDRjtFQUNGLENBQUM7RUFDSSxJQUFJZixJQUFJLENBQUNJLE1BQU0sS0FBSyxDQUFDLEVBQUU7SUFDMUIsTUFBTSxDQUFDQyxHQUFHLEVBQUVVLEdBQUcsRUFBRUMsR0FBRyxDQUFDLEdBQUdoQixJQUFJOztJQUU1QixJQUFJLElBQUFTLGdCQUFRLEVBQUNKLEdBQUcsQ0FBQyxFQUFFO01BQ2pCRixJQUFJLENBQUNPLElBQUksR0FBR0wsR0FBRzs7TUFFZixJQUFJQyxLQUFLLENBQUNDLE9BQU8sQ0FBQ1EsR0FBRyxDQUFDLEVBQUU7UUFDdEJaLElBQUksQ0FBQ0ssTUFBTSxHQUFHTyxHQUFHO01BQ25CLENBQUM7TUFDSSxJQUFJLElBQUFGLGVBQU8sRUFBQ0UsR0FBRyxDQUFDLElBQUksSUFBQUosZ0JBQVEsRUFBQ0ksR0FBRyxDQUFDLEVBQUU7UUFDdENaLElBQUksQ0FBQ1csTUFBTSxHQUFHQyxHQUFHO01BQ25COztNQUVBLElBQUksSUFBQUosZ0JBQVEsRUFBQ0ssR0FBRyxDQUFDLEVBQUU7UUFDakJiLElBQUksQ0FBQ1MsT0FBTyxHQUFHWCxjQUFjLENBQUNlLEdBQUcsQ0FBQztNQUNwQztJQUNGO0VBQ0Y7O0VBRUEsT0FBT2IsSUFBSTtBQUNiLENBQUMsQ0FBQ0wsT0FBQSxDQUFBQyxVQUFBLEdBQUFBLFVBQUEifQ==